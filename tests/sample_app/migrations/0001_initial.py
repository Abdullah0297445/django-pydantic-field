# Generated by Django 4.2.7 on 2023-11-20 18:19

import django.core.serializers.json
from django.db import migrations, models
import django_pydantic_field.compat.django
import django_pydantic_field.fields
import tests.sample_app.models
import typing


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Building",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "opt_meta",
                    django_pydantic_field.fields.PydanticSchemaField(
                        config=None,
                        default={"buildingType": "frame"},
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        exclude={"type"},
                        null=True,
                        schema=django_pydantic_field.compat.django.GenericContainer(
                            typing.Union,
                            (
                                tests.sample_app.models.BuildingMeta,
                                type(None),
                            ),
                        ),
                    ),
                ),
                (
                    "meta",
                    django_pydantic_field.fields.PydanticSchemaField(
                        by_alias=True,
                        config=None,
                        default={"buildingType": "frame"},
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        include={"type"},
                        schema=tests.sample_app.models.BuildingMeta,
                    ),
                ),
                (
                    "meta_schema_list",
                    django_pydantic_field.fields.PydanticSchemaField(
                        config=None,
                        default=list,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        schema=django_pydantic_field.compat.django.GenericContainer(
                            list, (tests.sample_app.models.BuildingMeta,)
                        ),
                    ),
                ),
                (
                    "meta_typing_list",
                    django_pydantic_field.fields.PydanticSchemaField(
                        config=None,
                        default=list,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        schema=django_pydantic_field.compat.django.GenericContainer(
                            list, (tests.sample_app.models.BuildingMeta,)
                        ),
                    ),
                ),
                (
                    "meta_untyped_list",
                    django_pydantic_field.fields.PydanticSchemaField(
                        config=None, default=list, encoder=django.core.serializers.json.DjangoJSONEncoder, schema=list
                    ),
                ),
                (
                    "meta_untyped_builtin_list",
                    django_pydantic_field.fields.PydanticSchemaField(
                        config=None, default=list, encoder=django.core.serializers.json.DjangoJSONEncoder, schema=list
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PostponedBuilding",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "meta",
                    django_pydantic_field.fields.PydanticSchemaField(
                        by_alias=True,
                        config=None,
                        default={"buildingType": tests.sample_app.models.BuildingTypes["FRAME"]},
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        schema=tests.sample_app.models.BuildingMeta,
                    ),
                ),
                (
                    "meta_builtin_list",
                    django_pydantic_field.fields.PydanticSchemaField(
                        config=None,
                        default=list,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        schema=django_pydantic_field.compat.django.GenericContainer(
                            list, (tests.sample_app.models.BuildingMeta,)
                        ),
                    ),
                ),
                (
                    "meta_typing_list",
                    django_pydantic_field.fields.PydanticSchemaField(
                        config=None,
                        default=list,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        schema=django_pydantic_field.compat.django.GenericContainer(
                            list, (tests.sample_app.models.BuildingMeta,)
                        ),
                    ),
                ),
                (
                    "meta_untyped_list",
                    django_pydantic_field.fields.PydanticSchemaField(
                        config=None, default=list, encoder=django.core.serializers.json.DjangoJSONEncoder, schema=list
                    ),
                ),
                (
                    "meta_untyped_builtin_list",
                    django_pydantic_field.fields.PydanticSchemaField(
                        config=None, default=list, encoder=django.core.serializers.json.DjangoJSONEncoder, schema=list
                    ),
                ),
                (
                    "nested_generics",
                    django_pydantic_field.fields.PydanticSchemaField(
                        config=None,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        schema=django_pydantic_field.compat.django.GenericContainer(
                            typing.Union,
                            (
                                django_pydantic_field.compat.django.GenericContainer(
                                    list,
                                    (django_pydantic_field.compat.django.GenericContainer(typing.Literal, ("foo",)),),
                                ),
                                django_pydantic_field.compat.django.GenericContainer(typing.Literal, ("bar",)),
                            ),
                        ),
                    ),
                ),
            ],
        ),
    ]
